<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Fast solution</title>
</head>
<body>

    <div class="location" style="display: flex; ">
<div class="kasa">
    <h1>Akıllı kasa</h1>
    <img src="images/indir.jpeg" alt="">

    <div class="meyve">
        <button onclick="urunEkle('muz')">muz</button>
        <button onclick="urunEkle('çilek')">çilek</button>
        <button onclick="urunEkle('salatalık')">salatalık</button>
    </div>

    <div>
        <h2>Ürün İade</h2>
        <button onclick="urunIade()">Ürün İade</button>
    </div>

    <div>
        <h2>Ödeme Yap</h2>
        <button onclick="odemeYap('nakit')">Nakit</button>
        <button onclick="odemeYap('pos')">Pos</button>
    </div>

    <div>
        <h2>Toplam Tutar: <span id="toplamTutar">0</span> TL</h2>
    </div>
</div>


<div class="pastane">
    <h1>Pastane</h1>

    <img src="images/indir (1).jpeg" alt="">

    <div class="pasta">
        <button onclick="urunEkle('pasta')">pasta</button>
        <button onclick="urunEkle('poğaça')">poğaça</button>
        <button onclick="urunEkle('kurabiye')">kurabiye</button>


    </div>

</div>

</div>

<div class="sensor">
    <h1>Saklama Alanı Durumu</h1>
    <div>
        <h2>Sıcaklık: <span id="sicaklik">-</span> °C</h2>
        <h2>Nem: <span id="nem">-</span> %</h2>
        <h2>Doluluk: <span id="doluluk">-</span> %</h2>
    </div>
    <button onclick="durumGuncelle()">Durumu Güncelle</button>
</div>

<div class="personel">
    <h1>Personel Yönetimi</h1>
    <div>
        <h2>Maaşlar</h2>
        <div id="maaslar"></div>
    </div>
    <div>
        <h2>Nöbet Çizelgesi</h2>
        <div id="nobetCizelgesi"></div>
    </div>
    <div>
        <h2>İzin Listesi</h2>
        <div id="izinListesi"></div>
    </div>
    <button onclick="personelYonetimi()">Personel Yönetimini Güncelle</button>
</div>

<div class="rapor">
    <h1>Tedarik ve Stok Satış Raporu</h1>
    <div>
        <h2>Tedarik Raporu</h2>
        <div id="tedarikRaporu"></div>
    </div>
    <div>
        <h2>Stok Satış Raporu</h2>
        <div id="stokSatisRaporu"></div>
    </div>
    <button onclick="raporGuncelle()">Raporları Güncelle</button>
</div>

<script>
class OdemeYontemi {
    odemeYap(tutar) {
        throw new Error("Bu metod alt sınıflar tarafından uygulanmalıdır.");
    }
}

class NakitOdeme extends OdemeYontemi {
    odemeYap(tutar) {
        console.log(`Nakit ödeme alındı: ${tutar} TL`);
    }
}

class PosOdeme extends OdemeYontemi {
    odemeYap(tutar) {
        console.log(`Kart ile ödeme alındı: ${tutar} TL`);
    }
}

class Urun {
    constructor(fiyat, kilo) {
        this.fiyat = fiyat;
        this.kilo = kilo;
    }

    getToplamFiyat() {
        return this.fiyat * this.kilo;
    }
}

class Kasa {
    constructor() {
        this.toplamTutar = 0;
    }

    urunEkle(urun) {
        this.toplamTutar += urun.getToplamFiyat();
        console.log(`Ürün eklendi. Güncel toplam: ${this.toplamTutar} TL`);
        document.getElementById('toplamTutar').innerText = this.toplamTutar;
    }

    iade(urun) {
        this.toplamTutar -= urun.getToplamFiyat();
        console.log(`Ürün iade edildi. Güncel toplam: ${this.toplamTutar} TL`);
        document.getElementById('toplamTutar').innerText = this.toplamTutar;
    }

    odemeYap(odemeYontemi) {
        if (this.toplamTutar <= 0) {
            console.log("Ödenecek bir tutar yok.");
            return;
        }
        
        odemeYontemi.odemeYap(this.toplamTutar);
        this.toplamTutar = 0;
        console.log("Ödeme tamamlandı. Kasa sıfırlandı.");
        document.getElementById('toplamTutar').innerText = this.toplamTutar;
    }
}

const kasa = new Kasa();

const urunFiyatlari = {
    muz: 5,
    çilek: 10,
    salatalık: 3,
    pasta: 100,
    poğaça: 20,
    kurabiye: 5
};

function urunEkle(urunAdi) {
    let miktar;
    if (urunAdi === 'pasta' || urunAdi === 'poğaça' || urunAdi === 'kurabiye') {
        miktar = parseInt(prompt(`${urunAdi} adedini girin:`));
    } else {
        miktar = parseFloat(prompt(`${urunAdi} kilosunu girin:`));
    }
    if (isNaN(miktar) || miktar <= 0) {
        alert("Geçerli bir miktar girin.");
        return;
    }
    const fiyat = urunFiyatlari[urunAdi];
    kasa.urunEkle(new Urun(fiyat, miktar));
}

function urunIade() {
    const urunAdi = prompt("İade edilecek ürün adını girin (muz, çilek, salatalık, pasta, poğaça, kurabiye):");
    if (!urunFiyatlari[urunAdi]) {
        alert("Geçerli bir ürün adı girin.");
        return;
    }
    let miktar;
    if (urunAdi === 'pasta' || urunAdi === 'poğaça' || urunAdi === 'kurabiye') {
        miktar = parseInt(prompt(`${urunAdi} adedini girin:`));
    } else {
        miktar = parseFloat(prompt(`${urunAdi} kilosunu girin:`));
    }
    if (isNaN(miktar) || miktar <= 0) {
        alert("Geçerli bir miktar girin.");
        return;
    }
    const fiyat = urunFiyatlari[urunAdi];
    kasa.iade(new Urun(fiyat, miktar));
}

function odemeYap(odemeTuru) {
    const odemeYontemi = odemeTuru === 'nakit' ? new NakitOdeme() : new PosOdeme();
    kasa.odemeYap(odemeYontemi);
    alert("Ödeme tamamlandı.");
}

class Sensor {
    constructor() {
        if (this.constructor === Sensor) {
            throw new Error("Abstract class 'Sensor' cannot be instantiated directly.");
        }
    }

    ölç() {
        throw new Error("Method 'ölç()' must be implemented.");
    }
}

class SicaklikSensor extends Sensor {
    ölç() {
        return (Math.random() * 20 + 10).toFixed(2); // 10-30 derece arası rastgele değer
    }
}

class NemSensor extends Sensor {
    ölç() {
        return (Math.random() * 50 + 30).toFixed(2); // 30-80% arası rastgele değer
    }
}

class DolulukSensor extends Sensor {
    ölç() {
        return (Math.random() * 100).toFixed(2); // 0-100% arası rastgele değer
    }
}

class SaklamaAlani {
    constructor() {
        this.sicaklikSensor = new SicaklikSensor();
        this.nemSensor = new NemSensor();
        this.dolulukSensor = new DolulukSensor();
    }

    durumGuncelle() {
        const sicaklik = this.sicaklikSensor.ölç();
        const nem = this.nemSensor.ölç();
        const doluluk = this.dolulukSensor.ölç();

        document.getElementById('sicaklik').innerText = sicaklik;
        document.getElementById('nem').innerText = nem;
        document.getElementById('doluluk').innerText = doluluk;

        console.log("Saklama Alanı Durumu:");
        console.log(`Sıcaklık: ${sicaklik} °C`);
        console.log(`Nem: ${nem} %`);
        console.log(`Doluluk: ${doluluk} %`);
    }
}

const saklamaAlani = new SaklamaAlani();

function durumGuncelle() {
    saklamaAlani.durumGuncelle();
}

class Personel {
    constructor(ad, departman) {
        if (this.constructor === Personel) {
            throw new Error("Abstract class 'Personel' cannot be instantiated directly.");
        }
        this.ad = ad;
        this.departman = departman;
    }

    maasHesapla() {
        throw new Error("Method 'maasHesapla()' must be implemented.");
    }
}

class MusteriDestek extends Personel {
    constructor(ad, saatlikUcret, calismaSaati) {
        super(ad, "Müşteri Destek");
        this.saatlikUcret = saatlikUcret;
        this.calismaSaati = calismaSaati;
    }

    maasHesapla() {
        return this.saatlikUcret * this.calismaSaati;
    }
}

class ReyonBakim extends Personel {
    constructor(ad, aylikMaas) {
        super(ad, "Reyon Bakım");
        this.aylikMaas = aylikMaas;
    }

    maasHesapla() {
        return this.aylikMaas;
    }
}

class NobetCizelgesi {
    constructor() {
        this.nobetler = [];
    }

    nobetEkle(personel, tarih) {
        this.nobetler.push({ personel, tarih });
    }

    listele() {
        const nobetListesi = this.nobetler.map(nobet => `${nobet.personel.ad} - ${nobet.tarih}`).join('<br>');
        document.getElementById('nobetCizelgesi').innerHTML = nobetListesi;
    }
}

class IzinYoneticisi {
    constructor() {
        this.izinler = [];
    }

    izinEkle(personel, baslangic, bitis) {
        this.izinler.push({ personel, baslangic, bitis });
    }

    listele() {
        const izinListesi = this.izinler.map(izin => `${izin.personel.ad} - ${izin.baslangic} - ${izin.bitis}`).join('<br>');
        document.getElementById('izinListesi').innerHTML = izinListesi;
    }
}

function personelYonetimi() {
    const personeller = [
        new MusteriDestek("Ahmet", 50, 160),
        new MusteriDestek("Ayşe", 55, 150),
        new MusteriDestek("Fatma", 60, 140),
        new ReyonBakim("Mehmet", 10000),
        new ReyonBakim("Ali", 9500),
        new ReyonBakim("Veli", 9000)
    ];

    const maaslar = personeller.map(personel => `${personel.ad} Maaş: ${personel.maasHesapla()} TL`).join('<br>');
    document.getElementById('maaslar').innerHTML = maaslar;

    const nobetCizelgesi = new NobetCizelgesi();
    nobetCizelgesi.nobetEkle(personeller[0], "2025-03-20");
    nobetCizelgesi.nobetEkle(personeller[1], "2025-03-21");
    nobetCizelgesi.nobetEkle(personeller[2], "2025-03-22");
    nobetCizelgesi.nobetEkle(personeller[3], "2025-03-23");
    nobetCizelgesi.nobetEkle(personeller[4], "2025-03-24");
    nobetCizelgesi.nobetEkle(personeller[5], "2025-03-25");
    nobetCizelgesi.listele();

    const izinYoneticisi = new IzinYoneticisi();
    izinYoneticisi.izinEkle(personeller[0], "2025-04-01", "2025-04-05");
    izinYoneticisi.izinEkle(personeller[1], "2025-04-06", "2025-04-10");
    izinYoneticisi.izinEkle(personeller[2], "2025-04-11", "2025-04-15");
    izinYoneticisi.listele();
}

class Rapor {
    constructor() {
        this.tedarik = JSON.parse(localStorage.getItem('tedarik')) || [];
        this.stokSatis = JSON.parse(localStorage.getItem('stokSatis')) || [];
    }

    tedarikEkle(urun, miktar) {
        this.tedarik.push({ urun, miktar, tarih: new Date().toLocaleDateString() });
        localStorage.setItem('tedarik', JSON.stringify(this.tedarik));
    }

    stokSatisEkle(urun, miktar) {
        this.stokSatis.push({ urun, miktar, tarih: new Date().toLocaleDateString() });
        localStorage.setItem('stokSatis', JSON.stringify(this.stokSatis));
    }

    listele() {
        const tedarikListesi = this.tedarik.map(item => `${item.tarih} - ${item.urun}: ${item.miktar}`).join('<br>');
        document.getElementById('tedarikRaporu').innerHTML = tedarikListesi;

        const stokSatisListesi = this.stokSatis.map(item => `${item.tarih} - ${item.urun}: ${item.miktar}`).join('<br>');
        document.getElementById('stokSatisRaporu').innerHTML = stokSatisListesi;
    }
}

const rapor = new Rapor();

function raporGuncelle() {
    rapor.listele();
}

// Example usage
rapor.tedarikEkle('muz', 100);
rapor.stokSatisEkle('muz', 20);
raporGuncelle();

</script>
</body>
</html>
